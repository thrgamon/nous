{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/marked/lib/marked.esm.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^( {0,${Math.min(3, indent - 1)}})(\\`\\`\\`|~~~)`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (this.rules.block.heading.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inline(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inline(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong  () Consume to delim (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[^*]+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback);\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            marked.walkTokens(token[childTokens], callback);\n          });\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n","<script>\n  import { marked } from \"marked\";\n\n  export let previousDay;\n  export let nextDay;\n  export let notes;\n  let editingId = undefined;\n  let editingBody = \"\";\n  let editingTags = \"\";\n\n  async function postData(url = '', data = {}, method = \"POST\") {\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: method,\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(data)\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not OK');\n        }\n        return response;\n        })\n      .catch(error => {\n        alert(\"there was an error\", error)\n        throw new Error('Network response was not OK');\n      })\n  }\n\n  function toggle(id) {\n    let success = false;\n    postData('/api/done', { Id: id })\n    .then(response => {\n      notes = notes.map(note => {\n        if (note.ID === id) {\n          // return a new object\n          return {\n            ID: id,\n            Done: !note.Done,\n            Body: note.Body,\n            Tags: note.Tags\n          };\n        }\n\n        // return the same object\n        return note;\n\t\t});\n\n      console.log(notes)\n    })\n    .catch(error => {\n        alert('there as a boo boo')\n    })\n  }\n\n  function toggleEdit(id) {\n      const note = notes.find(note => {\n        if (note.ID === id) {\n          // return a new object\n          return note\n      }\n\t\t});\n    editingId = id\n    editingBody = note.BodyRaw\n    editingTags = note.Tags.join(\", \")\n  }\n\n  function handleEdit(id) {\n    postData(`/api/note/${id}`, { Id: id, Body: editingBody, Tags: editingTags  }, \"PUT\")\n    .then(response => {\n      notes = notes.map(note => {\n        if (note.ID === id) {\n          // return a new object\n          return {\n            ID: id,\n            Done: note.Done,\n            BodyRaw: editingBody,\n            Tags: editingTags.split(\", \")\n          };\n        }\n\n        // return the same object\n        return note;\n\t\t}\n        )\n          editingId = undefined\n      });\n  }\n\n</script>\n\n<main>\n  <div class=\"prev-next\">\n    <a href={`/t/${previousDay}`}>&larr;</a>\n    {#if nextDay}\n      <a href={`/t/${nextDay}`}>&rarr;</a>\n    {/if}\n  </div>\n  <form class=\"submit\" action=\"/note\" method=\"post\">\n    <textarea type=\"text\" name=\"body\" required autofocus />\n    <input type=\"text\" name=\"tags\" placeholder=\"use comma 'seperated values'\" />\n    <input type=\"submit\" value=\"Submit\" />\n  </form>\n  <div class=\"grid-note\">\n    {#each notes as note}\n      <div class=\"flex-center\">\n        <input\n          name=\"done\"\n          type=\"checkbox\"\n          checked={note.Done}\n          on:change={() => toggle(note.ID)}\n        />\n      </div>\n    {#if editingId === note.ID}\n      <textarea type=\"text\" name=\"body\" required bind:value={editingBody} />\n      <input type=\"text\" name=\"tags\" placeholder=\"use comma 'seperated values'\" bind:value={editingTags} />\n      <input type=\"submit\" value=\"Submit\" on:click={()=>handleEdit(note.ID)}/>\n    {:else}\n      <div class=\"note\" class:done={note.Done}>\n        <a name={note.ID} />\n        {@html marked(note.BodyRaw)}\n        <hr />\n      </div>\n      <div class=\"metadata\">\n        <ul class=\"tags text-subdued\">\n          {#each note.Tags as tag}\n            <li class=\"tag\">{tag}</li>\n          {/each}\n        </ul>\n      </div>\n    {/if}\n      <div class=\"flex-center\">\n        <a href=\"/note/{note.ID}/delete\">delete</a>\n        <button on:click={() => toggleEdit(note.ID)}>Edit </button>\n      </div>\n    {/each}\n  </div>\n</main>\n","import App from './App.svelte';\n\nconst app = new App({ target: document.body,\n\tprops: {\n    notes: JSON.parse(window.notes) || [],\n    previousDay: window.previousDay,\n    nextDay: window.nextDay,\n\t}\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_input_value","input","toggle_class","toggle","classList","HtmlTag","constructor","is_svg","this","e","n","c","html","h","m","nodeName","createElementNS","t","innerHTML","Array","from","childNodes","p","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","ctx","after_update","outroing","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_mount","on_destroy","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","children","l","intro","block","local","delete","transition_in","customElement","new_on_destroy","map","filter","mount_component","getDefaults","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartLists","smartypants","tokenizer","walkTokens","xhtml","defaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","encode","test","replace","unescapeTest","unescape","_","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","source","obj","val","getRegex","RegExp","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","indexOf","baseUrls","justDomain","rtrim","relativeBase","protocol","domain","resolveUrl","encodeURI","noopTest","exec","merge","key","arguments","prototype","hasOwnProperty","call","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","trim","shift","splice","invert","suffLen","currChar","slice","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","state","inLink","token","type","tokens","inlineTokens","Tokenizer","src","rules","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","heading","trimmed","depth","inline","hr","blockquote","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","task","checked","trimRight","top","spacers","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","tag","table","item","header","align","rows","j","k","row","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","level","findClosingBracket","linkLen","_escapes","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","out","charCodeAt","random","toString","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","Lexer","inlineQueue","static","lex","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","repeat","some","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","slug","body","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parseInline","l2","l3","cell","itemBody","renderers","parser","unshift","marked","done","err","pending","setTimeout","message","BodyRaw","each_value_1","Tags","a_name_value","ID","div0","Done","div1","ul","html_tag","raw_value","textarea","input0","input1","li","wholeText","set_data","t_value","create_if_block","input_checked_value","a_href_value","button","create_if_block_1","main","form","postData","method","fetch","mode","cache","credentials","headers","redirect","referrerPolicy","JSON","stringify","response","ok","catch","alert","editingId","previousDay","$$props","nextDay","notes","editingBody","editingTags","id","Id","$$invalidate","note","Body","log","toggleEdit","find","handleEdit","undefined","setOptions","newDefaults","use","args","opts","childTokens","hasExtensions","pack","ext","prevRenderer","apply","prop","prevTokenizer","lexInline","$destroy","destroy_component","$on","$set","$$set","window"],"mappings":"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"}